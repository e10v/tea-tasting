[project]
name = "tea-tasting"
dynamic = ["version"]
description = "A Python package for the statistical analysis of A/B tests."
authors = [
    {name = "Evgeny Ivanov", email = "ivanov.evgeny.n@gmail.com"},
]
dependencies = [
    "ibis-framework[pandas]>=7,<10",
    "numpy>=1.25,<3",
    "pandas>=2,<3",
    "scipy>=1.10,<2",
]
requires-python = ">=3.10"
readme = "README.md"
license = {text = "MIT"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Typing :: Typed",
]

[project.urls]
homepage = "https://tea-tasting.e10v.me"
documentation = "https://tea-tasting.e10v.me/user-guide"
source = "https://github.com/e10v/tea-tasting"


[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"


[tool]
[tool.pdm]
[tool.pdm.build]
package-dir = "src"

[tool.pdm.dev-dependencies]
docs = ["mkdocs-material", "mkdocstrings[crystal,python]"]
examples = ["ibis-framework[duckdb]"]
lint = ["ruff", "pyright"]
test = ["pytest", "coverage[toml]"]

[tool.pdm.scripts]
lint = "ruff check ."
test = "coverage run -m pytest"
type = "pyright"

[tool.pdm.version]
source = "scm"
write_to = "tea_tasting/_version.txt"


[tool.ruff]
src = ["src"]

[tool.ruff.lint]
select = [
    "A", "ANN", "ARG", "B", "BLE", "C4", "C90", "COM", "D", "E", "ERA", "F",
    "FA", "FBT", "FIX", "FLY", "FURB", "I", "ICN", "INP", "INT", "ISC", "N",
    "NPY", "PD", "PERF", "PGH", "PIE", "PL", "PT", "Q", "RET", "RSE", "RUF",
    "S", "SIM", "SLF", "SLOT", "T10", "T20", "TCH", "TD", "TID", "TRY", "UP",
    "W",
]
ignore = ["ANN101", "ANN102", "ANN401", "PGH003", "SLF001", "TRY003"]

[tool.ruff.lint.per-file-ignores]
"*/__init__.py" = ["F401"]
"tests/*" = ["ANN201", "D100", "D103", "D104", "FBT003", "PLR2004", "PT001", "S101"]

[tool.ruff.lint.isort]
force-sort-within-sections = true
lines-after-imports = 2

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 8


[tool.pytest.ini_options]
testpaths = ["tests"]


[tool.coverage]
[tool.coverage.run]
source = ["src/tea_tasting"]
[tool.coverage.report]
exclude_lines = ["if TYPE_CHECKING:", "pragma: no cover", "@overload", "@abc.abstractmethod"]


[tool.pyright]
typeCheckingMode = "strict"
reportMissingTypeStubs = false
reportPrivateUsage = false
reportUnknownArgumentType = false
reportUnknownMemberType = false
reportUnknownVariableType = false
