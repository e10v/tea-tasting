# /// script
# requires-python = ">=3.10"
# dependencies = [
#     "marimo",
#     "polars",
#     "tea-tasting",
# ]
# ///

import marimo

__generated_with = "0.13.4"
app = marimo.App()


@app.cell(hide_code=True)
def _():
    import marimo as mo
    return (mo,)


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
        <h1 id="user-guide">User guide</h1>
        <h2 id="installation">Installation</h2>
        <div class="highlight"><pre><span></span><code>pip<span class="w"> </span>install<span class="w"> </span>tea-tasting
        </code></pre></div>
        <p>Install Pandas or Polars to serialize analysis results as a Pandas DataFrame or a Polars DataFrame, respectively. These packages are not installed with tea-tasting by default.</p>
        <h2 id="basic-usage">Basic usage</h2>
        <p>Begin with this simple example to understand the basic functionality:</p>
        """
    )
    return


@app.cell
def _():
    import tea_tasting as tt

    data = tt.make_users_data(seed=42)
    experiment = tt.Experiment(
        sessions_per_user=tt.Mean("sessions"),
        orders_per_session=tt.RatioOfMeans("orders", "sessions"),
        orders_per_user=tt.Mean("orders"),
        revenue_per_user=tt.Mean("revenue"),
    )
    result = experiment.analyze(data)
    result
    return data, experiment, result, tt


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
        <p>In the following sections, each step of this process is explained in detail.</p>
        <h3 id="input-data">Input data</h3>
        <p>The <a href="https://tea-tasting.e10v.me/api/datasets/#tea_tasting.datasets.make_users_data" target="_blank"><code>make_users_data</code></a> function creates synthetic data for demonstration purposes. This data mimics what you might encounter in an A/B test for an online store. Each row represents an individual user, with the following columns:</p>
        <ul>
        <li><code>user</code>: The unique identifier for each user.</li>
        <li><code>variant</code>: The specific variant (e.g., 0 or 1) assigned to each user in the A/B test.</li>
        <li><code>sessions</code>: The total number of user's sessions.</li>
        <li><code>orders</code>: The total number of user's orders.</li>
        <li><code>revenue</code>: The total revenue generated by the user.</li>
        </ul>
        <p>By default, <code>make_users_data</code> returns a PyArrow Table:</p>
        """
    )
    return


@app.cell
def _(data):
    data
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
        <p>You can control return type using the <code>return_type</code> parameter. The other possible output types are Pandas DataFrame and Polars DataFrame. They require Pandas or Polars packages respectively.</p>
        <p>tea-tasting can process data in the form of an Ibis Table or a DataFrame supported by Narwhals:</p>
        <ul>
        <li><a href="https://github.com/ibis-project/ibis" target="_blank">Ibis</a> is a DataFrame API to various data backends. It supports many backends including BigQuery, ClickHouse, DuckDB, PostgreSQL, Snowflake, Spark etc. You can write an SQL query, <a href="https://ibis-project.org/how-to/extending/sql#backend.sql" target="_blank">wrap</a> it as an Ibis Table and pass it to tea-tasting.</li>
        <li><a href="https://github.com/narwhals-dev/narwhals" target="_blank">Narwhals</a> is a compatibility layer between dataframe libraries. It supports cuDF, Dask, Modin, pandas, Polars, PyArrow dataframes. You can use any of these dataframes as an input to tea-tasting.</li>
        </ul>
        <p>Many statistical tests, such as the Student's t-test or the Z-test, require only aggregated data for analysis. For these tests, tea-tasting retrieves only aggregated statistics like mean and variance instead of downloading all detailed data. See more details in the <a href="https://tea-tasting.e10v.me/data-backends/" target="_blank">guide on data backends</a>.</p>
        <p>tea-tasting assumes that:</p>
        <ul>
        <li>Data is grouped by randomization units, such as individual users.</li>
        <li>There is a column indicating the variant of the A/B test (typically labeled as A, B, etc.).</li>
        <li>All necessary columns for metric calculations (like the number of orders, revenue, etc.) are included in the table.</li>
        </ul>
        <h3 id="ab-test-definition">A/B test definition</h3>
        <p>The <a href="https://tea-tasting.e10v.me/api/experiment/#tea_tasting.experiment.Experiment" target="_blank"><code>Experiment</code></a> class defines parameters of an A/B test: metrics and a variant column name. There are two ways to define metrics:</p>
        <ul>
        <li>Using keyword parameters, with metric names as parameter names, and metric definitions as parameter values, as in example above.</li>
        <li>Using the first argument <code>metrics</code> which accepts metrics in a form of dictionary with metric names as keys and metric definitions as values.</li>
        </ul>
        <p>By default, tea-tasting assumes that the A/B test variant is stored in a column named <code>"variant"</code>. You can change it using the <code>variant</code> parameter of the <code>Experiment</code> class.</p>
        <p>Example usage:</p>
        """
    )
    return


@app.cell
def _(tt):
    new_experiment = tt.Experiment(
        {
            "sessions per user": tt.Mean("sessions"),
            "orders per session": tt.RatioOfMeans("orders", "sessions"),
            "orders per user": tt.Mean("orders"),
            "revenue per user": tt.Mean("revenue"),
        },
        variant="variant",
    )
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
        <h3 id="metrics">Metrics</h3>
        <p>Metrics are instances of metric classes which define how metrics are calculated. Those calculations include calculation of effect size, confidence interval, p-value and other statistics.</p>
        <p>Use the <a href="https://tea-tasting.e10v.me/api/metrics/mean/#tea_tasting.metrics.mean.Mean" target="_blank"><code>Mean</code></a> class to compare averages between variants of an A/B test. For example, average number of orders per user, where user is a randomization unit of an experiment. Specify the column containing the metric values using the first parameter <code>value</code>.</p>
        <p>Use the <a href="https://tea-tasting.e10v.me/api/metrics/mean/#tea_tasting.metrics.mean.RatioOfMeans" target="_blank"><code>RatioOfMeans</code></a> class to compare ratios of averages between variants of an A/B test. For example, average number of orders per average number of sessions. Specify the columns containing the numerator and denominator values using parameters <code>numer</code> and <code>denom</code>.</p>
        <p>Use the following parameters of <code>Mean</code> and <code>RatioOfMeans</code> to customize the analysis:</p>
        <ul>
        <li><code>alternative</code>: Alternative hypothesis. The following options are available:<ul>
        <li><code>"two-sided"</code> (default): the means are unequal.</li>
        <li><code>"greater"</code>: the mean in the treatment variant is greater than the mean in the control variant.</li>
        <li><code>"less"</code>: the mean in the treatment variant is less than the mean in the control variant.</li>
        </ul>
        </li>
        <li><code>confidence_level</code>: Confidence level of the confidence interval. Default is <code>0.95</code>.</li>
        <li><code>equal_var</code>: Defines whether equal variance is assumed. If <code>True</code>, pooled variance is used for the calculation of the standard error of the difference between two means. Default is <code>False</code>.</li>
        <li><code>use_t</code>: Defines whether to use the Student's t-distribution (<code>True</code>) or the Normal distribution (<code>False</code>). Default is <code>True</code>.</li>
        </ul>
        <p>Example usage:</p>
        """
    )
    return


@app.cell
def _(tt):
    another_experiment = tt.Experiment(
        sessions_per_user=tt.Mean("sessions", alternative="greater"),
        orders_per_session=tt.RatioOfMeans("orders", "sessions", confidence_level=0.9),
        orders_per_user=tt.Mean("orders", equal_var=True),
        revenue_per_user=tt.Mean("revenue", use_t=False),
    )
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
        <p>Look for other supported metrics in the <a href="https://tea-tasting.e10v.me/api/metrics/index/" target="_blank">Metrics</a> reference.</p>
        <p>You can change default values of these four parameters using the <a href="#global-settings">global settings</a>.</p>
        <h3 id="analyzing-and-retrieving-experiment-results">Analyzing and retrieving experiment results</h3>
        <p>After defining an experiment and metrics, you can analyze the experiment data using the <a href="https://tea-tasting.e10v.me/api/experiment/#tea_tasting.experiment.Experiment.analyze" target="_blank"><code>analyze</code></a> method of the <code>Experiment</code> class. This method takes data as an input and returns an <code>ExperimentResult</code> object with experiment result.</p>
        """
    )
    return


@app.cell
def _(data, experiment):
    new_result = experiment.analyze(data)
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
        <p>By default, tea-tasting assumes that the variant with the lowest ID is a control. Change default behavior using the <code>control</code> parameter:</p>
        """
    )
    return


@app.cell
def _(data, experiment):
    result_with_non_default_control = experiment.analyze(data, control=1)
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
        <p><a href="https://tea-tasting.e10v.me/api/experiment/#tea_tasting.experiment.ExperimentResult" target="_blank"><code>ExperimentResult</code></a> is a mapping. Get a metric's analysis result using metric name as a key.</p>
        """
    )
    return


@app.cell
def _(result):
    result["orders_per_user"]
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
        <p>Fields in result depend on metrics. For <code>Mean</code> and <code>RatioOfMeans</code>, the <a href="https://tea-tasting.e10v.me/api/metrics/mean/#tea_tasting.metrics.mean.MeanResult" target="_blank">fields include</a>:</p>
        <ul>
        <li><code>metric</code>: Metric name.</li>
        <li><code>control</code>: Mean or ratio of means in the control variant.</li>
        <li><code>treatment</code>: Mean or ratio of means in the treatment variant.</li>
        <li><code>effect_size</code>: Absolute effect size. Difference between two means.</li>
        <li><code>effect_size_ci_lower</code>: Lower bound of the absolute effect size confidence interval.</li>
        <li><code>effect_size_ci_upper</code>: Upper bound of the absolute effect size confidence interval.</li>
        <li><code>rel_effect_size</code>: Relative effect size. Difference between two means, divided by the control mean.</li>
        <li><code>rel_effect_size_ci_lower</code>: Lower bound of the relative effect size confidence interval.</li>
        <li><code>rel_effect_size_ci_upper</code>: Upper bound of the relative effect size confidence interval.</li>
        <li><code>pvalue</code>: P-value</li>
        <li><code>statistic</code>: Statistic (standardized effect size).</li>
        </ul>
        <p><a href="https://tea-tasting.e10v.me/api/experiment/#tea_tasting.experiment.ExperimentResult" target="_blank"><code>ExperimentResult</code></a> provides the following methods to serialize and view the experiment result:</p>
        <ul>
        <li><code>to_dicts</code>: Convert the result to a sequence of dictionaries.</li>
        <li><code>to_arrow</code>: Convert the result to a PyArrow Table.</li>
        <li><code>to_pandas</code>: Convert the result to a Pandas DataFrame. Requires Pandas to be installed.</li>
        <li><code>to_polars</code>: Convert the result to a Polars DataFrame. Requires Polars to be installed.</li>
        <li><code>to_pretty_dicts</code>: Convert the result to a sequence of dictionaries with formatted values (as strings).</li>
        <li><code>to_string</code>: Convert the result to a string.</li>
        <li><code>to_html</code>: Convert the result to HTML.</li>
        </ul>
        <p><code>result</code> is the same as <code>print(result.to_string())</code>. <code>ExperimentResult</code> provides also the <code>_repr_html_</code> method and is rendered as HTML table in IPython, Jupyter, or Marimo.</p>
        """
    )
    return


@app.cell
def _(result):
    result
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
        <p>By default, methods <code>to_pretty_dicts</code>, <code>to_string</code>, and <code>to_html</code> return a predefined list of attributes. This list can be customized:</p>
        """
    )
    return


@app.cell
def _(result):
    result.with_keys((
        "metric",
        "control",
        "treatment",
        "effect_size",
        "effect_size_ci",
    ))
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
        <p>Or:</p>
        """
    )
    return


@app.cell
def _(result):
    print(result.to_string(keys=(
        "metric",
        "control",
        "treatment",
        "effect_size",
        "effect_size_ci",
    )))
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
        <h2 id="more-features">More features</h2>
        <h3 id="variance-reduction-with-cupedcupac">Variance reduction with CUPED/CUPAC</h3>
        <p>tea-tasting supports variance reduction with CUPED/CUPAC, within both <a href="https://tea-tasting.e10v.me/api/metrics/mean/#tea_tasting.metrics.mean.Mean" target="_blank"><code>Mean</code></a> and <a href="https://tea-tasting.e10v.me/api/metrics/mean/#tea_tasting.metrics.mean.RatioOfMeans" target="_blank"><code>RatioOfMeans</code></a> classes.</p>
        <p>Example usage:</p>
        """
    )
    return


@app.cell
def _(tt):
    data_cuped = tt.make_users_data(seed=42, covariates=True)
    experiment_cuped = tt.Experiment(
        sessions_per_user=tt.Mean("sessions", "sessions_covariate"),
        orders_per_session=tt.RatioOfMeans(
            numer="orders",
            denom="sessions",
            numer_covariate="orders_covariate",
            denom_covariate="sessions_covariate",
        ),
        orders_per_user=tt.Mean("orders", "orders_covariate"),
        revenue_per_user=tt.Mean("revenue", "revenue_covariate"),
    )
    result_cuped = experiment_cuped.analyze(data_cuped)
    result_cuped
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
        <p>Set the <code>covariates</code> parameter of the <code>make_users_data</code> functions to <code>True</code> to add the following columns with pre-experimental data:</p>
        <ul>
        <li><code>sessions_covariate</code>: Number of sessions before the experiment.</li>
        <li><code>orders_covariate</code>: Number of orders before the experiment.</li>
        <li><code>revenue_covariate</code>: Revenue before the experiment.</li>
        </ul>
        <p>Define the metrics' covariates:</p>
        <ul>
        <li>In <code>Mean</code>, specify the covariate using the <code>covariate</code> parameter.</li>
        <li>In <code>RatioOfMeans</code>, specify the covariates for the numerator and denominator using the <code>numer_covariate</code> and <code>denom_covariate</code> parameters, respectively.</li>
        </ul>
        <h3 id="sample-ratio-mismatch-check">Sample ratio mismatch check</h3>
        <p>The <a href="https://tea-tasting.e10v.me/api/metrics/proportion/#tea_tasting.metrics.proportion.SampleRatio" target="_blank"><code>SampleRatio</code></a> class in tea-tasting detects mismatches in the sample ratios of different variants of an A/B test.</p>
        <p>Example usage:</p>
        """
    )
    return


@app.cell
def _(data, tt):
    experiment_sample_ratio = tt.Experiment(
        orders_per_user=tt.Mean("orders"),
        revenue_per_user=tt.Mean("revenue"),
        sample_ratio=tt.SampleRatio(),
    )
    result_sample_ratio = experiment_sample_ratio.analyze(data)
    result_sample_ratio
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
        <p>By default, <code>SampleRatio</code> expects equal number of observations across all variants. To specify a different ratio, use the <code>ratio</code> parameter. It accepts two types of values:</p>
        <ul>
        <li>Ratio of the number of observation in treatment relative to control, as a positive number. Example: <code>SampleRatio(0.5)</code>.</li>
        <li>A dictionary with variants as keys and expected ratios as values. Example: <code>SampleRatio({"A": 2, "B": 1})</code>.</li>
        </ul>
        <p>The <code>method</code> parameter determines the statistical test to apply:</p>
        <ul>
        <li><code>"auto"</code>: Apply exact binomial test if the total number of observations is less than 1000, or normal approximation otherwise.</li>
        <li><code>"binom"</code>: Apply exact binomial test.</li>
        <li><code>"norm"</code>: Apply normal approximation of the binomial distribution.</li>
        </ul>
        <p>The <a href="https://tea-tasting.e10v.me/api/metrics/proportion/#tea_tasting.metrics.proportion.SampleRatioResult" target="_blank">result</a> of the sample ratio mismatch includes the following attributes:</p>
        <ul>
        <li><code>metric</code>: Metric name.</li>
        <li><code>control</code>: Number of observations in control.</li>
        <li><code>treatment</code>: Number of observations in treatment.</li>
        <li><code>pvalue</code>: P-value</li>
        </ul>
        <h3 id="global-settings">Global settings</h3>
        <p>In tea-tasting, you can change defaults for the following parameters:</p>
        <ul>
        <li><code>alternative</code>: Alternative hypothesis.</li>
        <li><code>confidence_level</code>: Confidence level of the confidence interval.</li>
        <li><code>equal_var</code>: If <code>False</code>, assume unequal population variances in calculation of the standard deviation and the number of degrees of freedom. Otherwise, assume equal population variance and calculate pooled standard deviation.</li>
        <li><code>n_resamples</code>: The number of resamples performed to form the bootstrap distribution of a statistic.</li>
        <li><code>use_t</code>: If <code>True</code>, use Student's t-distribution in p-value and confidence interval calculations. Otherwise use Normal distribution.</li>
        <li>And <a href="https://tea-tasting.e10v.me/api/config/#tea_tasting.config.config_context" target="_blank">more</a>.</li>
        </ul>
        <p>Use <a href="https://tea-tasting.e10v.me/api/config/#tea_tasting.config.get_config" target="_blank"><code>get_config</code></a> with the option name as a parameter to get a global option value:</p>
        """
    )
    return


@app.cell
def _(tt):
    tt.get_config("equal_var")
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
        <p>Use <a href="https://tea-tasting.e10v.me/api/config/#tea_tasting.config.get_config" target="_blank"><code>get_config</code></a> without parameters to get a dictionary of global options:</p>
        """
    )
    return


@app.cell
def _(tt):
    global_config = tt.get_config()
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
        <p>Use <a href="https://tea-tasting.e10v.me/api/config/#tea_tasting.config.set_config" target="_blank"><code>set_config</code></a> to set a global option value:</p>
        """
    )
    return


@app.cell
def _(tt):
    tt.set_config(equal_var=True, use_t=False)
    experiment_with_config = tt.Experiment(
        sessions_per_user=tt.Mean("sessions"),
        orders_per_session=tt.RatioOfMeans("orders", "sessions"),
        orders_per_user=tt.Mean("orders"),
        revenue_per_user=tt.Mean("revenue"),
    )
    tt.set_config(equal_var=False, use_t=True)
    experiment_with_config.metrics["orders_per_user"]
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
        <p>Use <a href="https://tea-tasting.e10v.me/api/config/#tea_tasting.config.config_context" target="_blank"><code>config_context</code></a> to temporarily set a global option value within a context:</p>
        """
    )
    return


@app.cell
def _(tt):
    with tt.config_context(equal_var=True, use_t=False):
        experiment_within_context = tt.Experiment(
            sessions_per_user=tt.Mean("sessions"),
            orders_per_session=tt.RatioOfMeans("orders", "sessions"),
            orders_per_user=tt.Mean("orders"),
            revenue_per_user=tt.Mean("revenue"),
        )
    tt.get_config("equal_var")

    tt.get_config("use_t")

    experiment_within_context.metrics["orders_per_user"]
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
        <h3 id="more-than-two-variants">More than two variants</h3>
        <details class="note" open="open">
        <summary>Note</summary>
        <p>This guide uses <a href="https://github.com/pola-rs/polars" target="_blank">Polars</a> as an example data backend. Install Polars in addition to tea-tasting to reproduce the examples:</p>
        <div class="highlight"><pre><span></span><code>pip<span class="w"> </span>install<span class="w"> </span>polars
        </code></pre></div>
        </details>
        <p>In tea-tasting, it's possible to analyze experiments with more than two variants. However, the variants will be compared in pairs through two-sample statistical tests.</p>
        <p>Example usage:</p>
        """
    )
    return


@app.cell
def _(experiment, tt):
    import polars as pl

    data_three_variants = pl.concat((
        tt.make_users_data(seed=42, return_type="polars"),
        tt.make_users_data(seed=21, return_type="polars")
            .filter(pl.col("variant").eq(1))
            .with_columns(variant=pl.lit(2, pl.Int64)),
    ))
    results = experiment.analyze(data_three_variants, control=0, all_variants=True)
    results
    return data_three_variants, results


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
        <p>How variant pairs are determined:</p>
        <ul>
        <li>Specified control variant: If a specific variant is set as <code>control</code>, as in the example above, it is then compared against each of the other variants.</li>
        <li>Default control variant: When the <code>control</code> parameter of the <code>analyze</code> method is set to <code>None</code>, tea-tasting automatically compares each variant pair. The variant with the lowest ID in each pair is a control.</li>
        </ul>
        <p>Example usage without specifying a control variant:</p>
        """
    )
    return


@app.cell
def _(data_three_variants, experiment):
    results_all = experiment.analyze(data_three_variants, all_variants=True)
    results_all
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
        <p>The result of the analysis is a mapping of <code>ExperimentResult</code> objects with tuples (control, treatment) as keys. You can view the result for a selected pair of variants:</p>
        """
    )
    return


@app.cell
def _(results):
    results[0, 1]
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
        <p>By default, tea-tasting does not adjust for multiple hypothesis testing. However, it provides several methods for multiple testing correction. For more details, see the <a href="https://tea-tasting.e10v.me/multiple-testing/" target="_blank">guide on multiple hypothesis testing</a>.</p>
        """
    )
    return


if __name__ == "__main__":
    app.run()
